name: Flutter
on:
  push:
    paths: 
      - .github/workflows/flutter.yml
      - 'android/**'
      - 'ios/**'
      - 'lib/**'
      - 'packages/**'
      - pubspec.yaml

env:
  GCS_PATH: gs://flutterttdemo/${{ github.sha }}
  GCS_URL: https://storage.googleapis.com/flutterttdemo/${{ github.sha }}
  GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}
  SCRIPT_PREPARE_REPO: |
    set -e

    git submodule update --init --recursive

    # Unlock git-crypt
    brew install git-crypt
    # https://github.com/sliteteam/github-action-git-crypt-unlock/blob/master/entrypoint.sh
    echo "${GIT_CRYPT_KEY}" | base64 --decode > ./git-crypt-key
    git-crypt unlock ./git-crypt-key
    rm ./git-crypt-key

    # Install yq with Homebrew (macOS) or snap (Ubuntu)
    brew install yq || sudo snap install yq

    # Extract config from pubspec.yaml
    _appVersion=$( yq e '.version' pubspec.yaml )
    _appVersionWithoutNumber=$( echo "${_appVersion}" | sed 's/+.*$//' )
    echo "BUILD_NAME=${_appVersionWithoutNumber}-${GITHUB_SHA:0:7}" | tee -a $GITHUB_ENV
  
    _flutterVersion=$( yq e '.environment.flutter' pubspec.yaml )
    echo "FLUTTER_VERSION=${_flutterVersion}" | tee -a $GITHUB_ENV

jobs:
  build_apk:
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prepare repo
        run: echo "${SCRIPT_PREPARE_REPO}" | bash -

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
      - run: flutter pub get
      - run: flutter build apk "--build-name=${BUILD_NAME}" --split-per-abi

      - name: Setup gcloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_UPLOADER_SA_KEY }}
      - name: Run gsutil cp
        run: gsutil cp build/app/outputs/apk/release/*.apk "${GCS_PATH}/apk"

      - name: Prepare markdown
        id: markdown
        run: |
          set -e

          _message=$( \
            echo '### Android builds'; \
            echo '```'; \
            echo "BUILD_NAME=${BUILD_NAME}"; \
            echo "FLUTTER_VERSION=${FLUTTER_VERSION}"; \
            echo '```'; \
            echo; \
            ls build/app/outputs/apk/release/*.apk \
              | xargs -n 1 basename \
              | xargs -n 1 -I {} printf -- "- [%s](${GCS_URL}/apk/%s)\n" {} {}; \
          )

          _message="${_message//'%'/'%25'}"
          _message="${_message//$'\n'/'%0A'}"
          _message="${_message//$'\r'/'%0D'}"
          echo "::set-output name=MESSAGE::${_message}"
      - name: Post GitHub comment
        uses: daohoangson/comment-on-github@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.markdown.outputs.MESSAGE }}
          fingerprint: <!-- ${{ github.sha }} -->

  build_ipa:
    if: ${{ false }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prepare repo
        run: echo "${SCRIPT_PREPARE_REPO}" | bash -

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
      - run: flutter pub get
      - name: Run flutter build ios
        run: |
          set -e

          flutter build ios "--build-name=${BUILD_NAME}" --no-codesign
          ( cd ios && fastlane ipa )

      - name: Setup gcloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_UPLOADER_SA_KEY }}
      - name: Run gsutil cp
        run: |
          set -e

          _releaseDir=build/app/outputs/ipa/release
          echo "<script>location='itms-services://?action=download-manifest&url='+encodeURIComponent('${GCS_URL}/ipa/manifest.plist');</script>" \
            >"${_releaseDir}/redirect.html"

          gsutil cp "${_releaseDir}"/* "${GCS_PATH}/ipa"

      - name: Prepare markdown
        id: markdown
        run: |
          set -e

          _message=$( \
            echo '### iOS build'; \
            echo '```'; \
            xcodebuild -version; \
            cat ios/Flutter/Generated.xcconfig | grep BUILD_NAME | sed s/FLUTTER_//; \
            echo "FLUTTER_VERSION=${FLUTTER_VERSION}"; \
            echo '```'; \
            echo; \
            printf '[manifest.plist](%s)' "${GCS_URL}/ipa/redirect.html"; \
          )

          _message="${_message//'%'/%25}"
          _message="${_message//$'\n'/%0A}"
          _message="${_message//$'\r'/%0D}"
          echo "::set-output name=MESSAGE::${_message}"
      - name: Post GitHub comment
        uses: daohoangson/comment-on-github@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.markdown.outputs.MESSAGE }}
          fingerprint: <!-- ${{ github.sha }} -->

  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prepare repo
        run: echo "${SCRIPT_PREPARE_REPO}" | bash -

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: beta
      - run: flutter pub get
      - run: flutter build windows
      - run: flutter pub run msix:create

      - name: Setup gcloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_UPLOADER_SA_KEY }}
      - name: Run gsutil cp
        run: gsutil cp build\windows\runner\Release\the_app.msix "${GCS_PATH}/windows"

      - name: Prepare markdown
        id: markdown
        run: |
          set -e

          _message=$( \
            echo '### Windows build'; \
            echo '```'; \
            echo "BUILD_NAME=${BUILD_NAME}"; \
            echo "FLUTTER_VERSION=${FLUTTER_VERSION}"; \
            echo '```'; \
            echo; \
            printf '[the_app.msix](%s)' "${GCS_URL}/windows/the_app.msix"; \
          )

          _message="${_message//'%'/'%25'}"
          _message="${_message//$'\n'/'%0A'}"
          _message="${_message//$'\r'/'%0D'}"
          echo "::set-output name=MESSAGE::${_message}"
      - name: Post GitHub comment
        uses: daohoangson/comment-on-github@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.markdown.outputs.MESSAGE }}
          fingerprint: <!-- ${{ github.sha }} -->
